/*
 * Altinn.AccessManagement
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Altinn.AccessManagement.UI.Integrations.AccessManagement.Models
{
    /// <summary>
    /// AccessManagementRequestToDeleteModel
    /// </summary>
    [DataContract(Name = "RequestToDelete")]
    public partial class AccessManagementRequestToDeleteModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessManagementRequestToDeleteModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccessManagementRequestToDeleteModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessManagementRequestToDeleteModel" /> class.
        /// </summary>
        /// <param name="ruleIds">ruleIds.</param>
        /// <param name="deletedByUserId">deletedByUserId (required).</param>
        /// <param name="policyMatch">policyMatch (required).</param>
        public AccessManagementRequestToDeleteModel(List<string> ruleIds = default(List<string>), int deletedByUserId = default(int), AccessManagementPolicyMatchModel policyMatch = default(AccessManagementPolicyMatchModel))
        {
            this.DeletedByUserId = deletedByUserId;
            // to ensure "policyMatch" is required (not null)
            if (policyMatch == null)
            {
                throw new ArgumentNullException("policyMatch is a required property for AccessManagementRequestToDeleteModel and cannot be null");
            }
            this.PolicyMatch = policyMatch;
            this.RuleIds = ruleIds;
        }

        /// <summary>
        /// Gets or Sets RuleIds
        /// </summary>
        [DataMember(Name = "ruleIds", EmitDefaultValue = true)]
        public List<string> RuleIds { get; set; }

        /// <summary>
        /// Gets or Sets DeletedByUserId
        /// </summary>
        [DataMember(Name = "deletedByUserId", IsRequired = true, EmitDefaultValue = true)]
        public int DeletedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets PolicyMatch
        /// </summary>
        [DataMember(Name = "policyMatch", IsRequired = true, EmitDefaultValue = true)]
        public AccessManagementPolicyMatchModel PolicyMatch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccessManagementRequestToDeleteModel {\n");
            sb.Append("  RuleIds: ").Append(RuleIds).Append("\n");
            sb.Append("  DeletedByUserId: ").Append(DeletedByUserId).Append("\n");
            sb.Append("  PolicyMatch: ").Append(PolicyMatch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
