/*
 * Altinn.AccessManagement
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Altinn.AccessManagement.UI.Integrations.AccessManagement.Models
{
    /// <summary>
    /// AccessManagementAuthorizedPartyExternalModel
    /// </summary>
    [DataContract(Name = "AuthorizedPartyExternal")]
    public partial class AccessManagementAuthorizedPartyExternalModel : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public AccessManagementAuthorizedPartyTypeExternalModel? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessManagementAuthorizedPartyExternalModel" /> class.
        /// </summary>
        /// <param name="partyUuid">partyUuid.</param>
        /// <param name="name">name.</param>
        /// <param name="organizationNumber">organizationNumber.</param>
        /// <param name="personId">personId.</param>
        /// <param name="partyId">partyId.</param>
        /// <param name="type">type.</param>
        /// <param name="unitType">unitType.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="onlyHierarchyElementWithNoAccess">onlyHierarchyElementWithNoAccess.</param>
        /// <param name="authorizedResources">authorizedResources.</param>
        /// <param name="authorizedRoles">authorizedRoles.</param>
        /// <param name="subunits">subunits.</param>
        public AccessManagementAuthorizedPartyExternalModel(Guid partyUuid = default(Guid), string name = default(string), string organizationNumber = default(string), string personId = default(string), int partyId = default(int), AccessManagementAuthorizedPartyTypeExternalModel? type = default(AccessManagementAuthorizedPartyTypeExternalModel?), string unitType = default(string), bool isDeleted = default(bool), bool onlyHierarchyElementWithNoAccess = default(bool), List<string> authorizedResources = default(List<string>), List<string> authorizedRoles = default(List<string>), List<AccessManagementAuthorizedPartyExternalModel> subunits = default(List<AccessManagementAuthorizedPartyExternalModel>))
        {
            this.PartyUuid = partyUuid;
            this.Name = name;
            this.OrganizationNumber = organizationNumber;
            this.PersonId = personId;
            this.PartyId = partyId;
            this.Type = type;
            this.UnitType = unitType;
            this.IsDeleted = isDeleted;
            this.OnlyHierarchyElementWithNoAccess = onlyHierarchyElementWithNoAccess;
            this.AuthorizedResources = authorizedResources;
            this.AuthorizedRoles = authorizedRoles;
            this.Subunits = subunits;
        }

        /// <summary>
        /// Gets or Sets PartyUuid
        /// </summary>
        [DataMember(Name = "partyUuid", EmitDefaultValue = false)]
        public Guid PartyUuid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationNumber
        /// </summary>
        [DataMember(Name = "organizationNumber", EmitDefaultValue = true)]
        public string OrganizationNumber { get; set; }

        /// <summary>
        /// Gets or Sets PersonId
        /// </summary>
        [DataMember(Name = "personId", EmitDefaultValue = true)]
        public string PersonId { get; set; }

        /// <summary>
        /// Gets or Sets PartyId
        /// </summary>
        [DataMember(Name = "partyId", EmitDefaultValue = false)]
        public int PartyId { get; set; }

        /// <summary>
        /// Gets or Sets UnitType
        /// </summary>
        [DataMember(Name = "unitType", EmitDefaultValue = true)]
        public string UnitType { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets OnlyHierarchyElementWithNoAccess
        /// </summary>
        [DataMember(Name = "onlyHierarchyElementWithNoAccess", EmitDefaultValue = true)]
        public bool OnlyHierarchyElementWithNoAccess { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedResources
        /// </summary>
        [DataMember(Name = "authorizedResources", EmitDefaultValue = true)]
        public List<string> AuthorizedResources { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedRoles
        /// </summary>
        [DataMember(Name = "authorizedRoles", EmitDefaultValue = true)]
        public List<string> AuthorizedRoles { get; set; }

        /// <summary>
        /// Gets or Sets Subunits
        /// </summary>
        [DataMember(Name = "subunits", EmitDefaultValue = true)]
        public List<AccessManagementAuthorizedPartyExternalModel> Subunits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccessManagementAuthorizedPartyExternalModel {\n");
            sb.Append("  PartyUuid: ").Append(PartyUuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationNumber: ").Append(OrganizationNumber).Append("\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  OnlyHierarchyElementWithNoAccess: ").Append(OnlyHierarchyElementWithNoAccess).Append("\n");
            sb.Append("  AuthorizedResources: ").Append(AuthorizedResources).Append("\n");
            sb.Append("  AuthorizedRoles: ").Append(AuthorizedRoles).Append("\n");
            sb.Append("  Subunits: ").Append(Subunits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
