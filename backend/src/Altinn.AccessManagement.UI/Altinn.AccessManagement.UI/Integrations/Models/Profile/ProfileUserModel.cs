/*
 * altinn-platform-profile
 *
 * Altinn Platform Profile
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Altinn.AccessManagement.UI.Integrations.Profile.Models
{
    /// <summary>
    /// ProfileUserModel
    /// </summary>
    [DataContract(Name = "User")]
    public partial class ProfileUserModel : IValidatableObject
    {
        /// <summary>
        /// Defines UserType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserTypeEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum SSNIdentified for value: SSNIdentified
            /// </summary>
            [EnumMember(Value = "SSNIdentified")]
            SSNIdentified = 2,

            /// <summary>
            /// Enum SelfIdentified for value: SelfIdentified
            /// </summary>
            [EnumMember(Value = "SelfIdentified")]
            SelfIdentified = 3,

            /// <summary>
            /// Enum EnterpriseIdentified for value: EnterpriseIdentified
            /// </summary>
            [EnumMember(Value = "EnterpriseIdentified")]
            EnterpriseIdentified = 4,

            /// <summary>
            /// Enum AgencyUser for value: AgencyUser
            /// </summary>
            [EnumMember(Value = "AgencyUser")]
            AgencyUser = 5,

            /// <summary>
            /// Enum PSAN for value: PSAN
            /// </summary>
            [EnumMember(Value = "PSAN")]
            PSAN = 6,

            /// <summary>
            /// Enum PSA for value: PSA
            /// </summary>
            [EnumMember(Value = "PSA")]
            PSA = 7
        }


        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name = "UserType", EmitDefaultValue = false)]
        public UserTypeEnum? UserType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileUserModel" /> class.
        /// </summary>
        /// <param name="userId">ID of the user..</param>
        /// <param name="userUuid">UUID of the user.</param>
        /// <param name="userName">the username.</param>
        /// <param name="externalIdentity">External Identity.</param>
        /// <param name="phoneNumber">the phone number.</param>
        /// <param name="email">the email address.</param>
        /// <param name="partyId">the party ID.</param>
        /// <param name="party">party.</param>
        /// <param name="userType">userType.</param>
        /// <param name="profileSettingPreference">profileSettingPreference.</param>
        public ProfileUserModel(int userId = default(int), Guid userUuid = default(Guid), string userName = default(string), string externalIdentity = default(string), string phoneNumber = default(string), string email = default(string), int partyId = default(int), ProfilePartyModel party = default(ProfilePartyModel), UserTypeEnum? userType = default(UserTypeEnum?), ProfileProfileSettingPreferenceModel profileSettingPreference = default(ProfileProfileSettingPreferenceModel))
        {
            this.UserId = userId;
            this.UserUuid = userUuid;
            this.UserName = userName;
            this.ExternalIdentity = externalIdentity;
            this.PhoneNumber = phoneNumber;
            this.Email = email;
            this.PartyId = partyId;
            this.Party = party;
            this.UserType = userType;
            this.ProfileSettingPreference = profileSettingPreference;
        }

        /// <summary>
        /// ID of the user.
        /// </summary>
        /// <value>ID of the user.</value>
        [DataMember(Name = "UserId", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// UUID of the user
        /// </summary>
        /// <value>UUID of the user</value>
        [DataMember(Name = "UserUuid", EmitDefaultValue = false)]
        public Guid UserUuid { get; set; }

        /// <summary>
        /// the username
        /// </summary>
        /// <value>the username</value>
        [DataMember(Name = "UserName", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// External Identity
        /// </summary>
        /// <value>External Identity</value>
        [DataMember(Name = "ExternalIdentity", EmitDefaultValue = false)]
        public string ExternalIdentity { get; set; }

        /// <summary>
        /// the phone number
        /// </summary>
        /// <value>the phone number</value>
        [DataMember(Name = "PhoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// the email address
        /// </summary>
        /// <value>the email address</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// the party ID
        /// </summary>
        /// <value>the party ID</value>
        [DataMember(Name = "PartyId", EmitDefaultValue = false)]
        public int PartyId { get; set; }

        /// <summary>
        /// Gets or Sets Party
        /// </summary>
        [DataMember(Name = "Party", EmitDefaultValue = false)]
        public ProfilePartyModel Party { get; set; }

        /// <summary>
        /// Gets or Sets ProfileSettingPreference
        /// </summary>
        [DataMember(Name = "ProfileSettingPreference", EmitDefaultValue = false)]
        public ProfileProfileSettingPreferenceModel ProfileSettingPreference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileUserModel {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserUuid: ").Append(UserUuid).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  ExternalIdentity: ").Append(ExternalIdentity).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  Party: ").Append(Party).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  ProfileSettingPreference: ").Append(ProfileSettingPreference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
